Title         : Fundamentals of the *flutterbye*
Author        : Michael Lowell Roberts
Copyright     : (c) 2016, Michael Lowell Roberts
License       : Apache License 2.0 
Logo          : True

[TITLE]

~ Center
[this document is an early work-in-progress.]{ :red }
~

# Scope 

The purpose of this document is to informally specify, in concise terms[^concise-terms], the operational semantic called [flutterbye]. 

[^concise-terms]: Less so, if you're tempted to read the footnotes.

[flutterbye]: https://github.com/fmrl/flutterbye

# Overview

*flutterbye* is an operational semantic that resembles the actor model[^actor-model-help]; it is an intermediate representation of causality in a computer program. 

[^actor-model-help]: For the purposes of understanding *flutterbye*, it is sufficient to understand [the actor model] to be an asynchronous message passing system, where message processors (i.e. *actors*) may have an associated state.

[the actor model]: http://en.wikipedia.org/wiki/Actor_model "Wikipedia: Actor Model"

We divide *flutterbye* into three primary components:

#. *storage*.
#. *fabric*.
#. *scheduler*.

## Storage

The storage component must conform to the semantics of a mutable key-value store.

## Fabric

The *fabric* is the portion of *flutterbye* that resembles the actor model. *Regions* correspond to actors and *effects* correspond to messages.

We reason about computer programs modeled using *regions* and *effects* as if the program were a distributed system[^as-if-distributed].

[^as-if-distributed]: Another way to think of actor systems is that they are the application of distributed programming techniques outside of the context of distributed programming.

### Effects

*Effects* represent what is normally referred to as a [side-effect] in computer science.

[side-effect]: https://en.wikipedia.org/wiki/Side_effect_%28computer_science%29 "Wikipedia: Side effect (Computer Science)"

Effects are both produced and consumed by regions, as actors would produce and consume messages in an actor system.

An effect ($E$) is defined as follows:

~ Math
  E=\left(I_R, x\right)
~

~ Center
| ------ | -------------------- |
| Symbol | Description          | 
| -------| -------------------- |
| $I_R$  | recipient region     |
| $x$    | payload (undefined)  |
| ------ | -------------------- |
{ .booktable }
~

### Regions

A *region* ($R$) is specified as follows:

~ Math
  R=\left(I_R, T_c, S\right)
~

~ Center
| ------ | -------------------------- |
| Symbol | Description                | 
| -------| -------------------------- |
| $I_R$  | identity of the region $R$ |
| $T_c$  | causal transform           |
| $S$    | state of region $R$        |
| ------ | -------------------------- |
{ .booktable }
~

#### Import Regions

*Import regions* represent input to the program. They are modeled as effect generators.

#### Export Regions

*Export regions* represent program output. They are modeled as logs with an undefined record schema.

#### Region Classes

A *region class* describes a group of regions that share a common causal transform (i.e. only differing in identity and state).

#### Region Modules

A collection of regions that include a single import region and a single export region are referred to as region modules. Region modules import and export effects exclusively.

#### Region Refinement

A region may be substituted for a region module, provided that the module exhibits behavior that correctly mimics the region it replaces. This substitution is called *region refinement*. 

A placeholder region whose purpose is to serve as a site for refinement is called an *abstract region*.

Whether a region module serves as a correct refinement for a given abstract region should[^refinement-wip] be verifiable with a software verification tool such as [F*][fstar] or [Dafny].

[^refinement-wip]: We hope to turn this *should be verifiable* into an *is verifiable*.

[fstar]: http://www.fstar-lang.org/ "F* Home Page"

[Dafny]: http://research.microsoft.com/en-us/projects/dafny/ "Dafny Home Page"

### Causal Transform

The causal transform is a [total function] that expresses what would happen if the program were to advance one step forward.

[total function]: http://en.wikipedia.org/wiki/Partial_function#Total_function "Wikipedia: Total Function"

~ Math
  T_c:\left(I_R, C, S\right)\rightarrow\left(S', \left\{E_1...E_n\right\}\right)
~

~ Center
| -------------------------- | ----------------------------- |
| Symbol                     | Description                   | 
| -------------------------- | ----------------------------- |
| $T_c$                      | causal transform              |
| $I_R$                      | identity of the region $R$    |
| $C$                        | input effect (or *cause*)     |
| $S$                        | state of region $R$           |
| $S'$                       | successor state of region $R$ |
| $\left\{E_1...E_n\right\}$ | multiset of output effects    |
| -------------------------- | ----------------------------- |
{ .booktable }
~

The causal transform does not advance the state of the program. Rather, the scheduler uses the output of a region's causal transform to advance the state of the program by one step.

### Causal Threads

*Causal threads* are the paths of dependent calculations that are represented by stringing causal transforms together through the transmission of effects. A thread remains stable when a transform produces a single effect. A thread splits into multiple threads when a transform produces more than one effect. A thread terminates when a causal transform produces no effects.

Together, these threads describe the *causal fabric*, which serves as an exact specification of the causality in a computer program. The fabric also describes the maximum amount of concurrency a program may exhibit.

## Scheduler

The scheduler multiplexes causal threads onto either one thread or a thread pool. It does this by advancing the system one or more steps at a time. A full step consists of:

#. Retrieve the actor's state from storage.
#. Apply the actor's causal transform to the actor's state.
#. Replace the actor's previous state in storage with its new state.
#. Schedule new effects to be processed at a later time.

Causal transforms must be applied occur in a time order that conforms to a [topological sort]. Note that topological sort is a partial sort a

[topological sort]: https://en.wikipedia.org/wiki/Topological_sorting "Wikipedia: Topological Sort"

The schedule must fairly schedule effects.




